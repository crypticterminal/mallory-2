#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'mallory'
require 'optparse'
require 'logging'

#ARGV << '--help' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: proxybalancer [options]"

  opts.on("-p", "--port PORT", Integer, "Port to listen on (default 9999)") do |v|
    options[:port] = v
  end

  opts.on("-b", "--backend BACKEND", String, "Backend to use (default 'file://proxies.txt')") do |v|
    options[:backend] = v
  end

  opts.on("-ct", "--connect-timeout SECONDS", Integer, "Proxy connect timeout (default 2s)") do |v|
    options[:ct] = v
  end

  opts.on("-it", "--inactivity-timeout SECONDS", Integer, "Proxy inactivity timeout (default 2s)") do |v|
    options[:it] = v
  end

  opts.on("-l", "--activity-log LOGFILE", String, "Log events & debug (default STDOUT)") do |v|
    options[:activity_log] = v
  end

  opts.on("-r", "--request-log LOGFILE", String, "Log requests (default none)") do |v|
    options[:request_log] = v
  end

  opts.on("-v", "--verbose", "Run in debug mode") do |v|
    options[:verbose] = v
  end
end.parse!

def get_logger(activity_log, request_log, verbose)
  # https://github.com/TwP/logging/blob/master/lib/logging/layouts/pattern.rb
  Logging.init :debug, :info, :request
  layout = Logging::Layouts::Pattern.new({ :pattern => "%d %-5l : %m\n"})
  logger = Logging.logger['mallory']

  activity_appender = Logging.appenders.stdout
  activity_appender = Logging.appenders.file(activity_log) if not activity_log.nil?
  activity_appender.layout = layout
  activity_appender.level = verbose ? :debug : :info
  logger.add_appenders(activity_appender)
  
  if not request_log.nil?
    request_appender = Logging.appenders.file(request_log)
    request_appender.layout = layout
    request_appender.level = :request
    logger.add_appenders(request_appender)
  end

  logger
end

config = Mallory::Configuration.register do |c|
  c.logger = get_logger(options.delete(:activity_log), options.delete(:request_log), options.delete(:verbose))
  c.backend = Mallory::Backend::Self.new()
  #c.backend = Mallory::Backend::File.new("#{Dir.pwd}/proxies.txt")
#  c.backend = Mallory::Backend::Redis.new("127.0.0.1", 6379)
  c.connect_timeout = options.delete(:connect_timeout) || 2
  c.inactivity_timeout = options.delete(:inactivity_timeout) || 2
  c.port = options.delete(:port) || 9999
end

Mallory::Server.new(config).start!
