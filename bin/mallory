#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'mallory'
require 'optparse'
require 'logging'

#ARGV << '--help' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: proxybalancer [options]"

  opts.on("-l", "--listen PORT", Integer, "Port to listen on (default 9999)") do |v|
    options[:listen] = v
  end

  opts.on("-b", "--backend BACKEND", String, "Backend to use (default 'file://proxies.txt')") do |v|
    options[:listen] = v
  end

  opts.on("-ct", "--connect-timeout SECONDS", Integer, "Proxy connect timeout (default 2s)") do |v|
    options[:ct] = v
  end

  opts.on("-it", "--inactivity-timeout SECONDS", Integer, "Proxy inactivity timeout (default 2s)") do |v|
    options[:it] = v
  end

  opts.on("-v", "--verbose", "Run in debug mode") do |v|
    options[:verbose] = v
  end
end.parse!

def get_logger(verbose)
  # https://github.com/TwP/logging/blob/master/lib/logging/layouts/pattern.rb
  layout = Logging::Layouts::Pattern.new({ :pattern => "%d %-5l : %m\n"})
  logger = Logging.logger['mallory']
  file_appender = Logging.appenders.file("mallory.log")
  file_appender.layout = layout
  file_appender.level = :info
  logger.add_appenders(file_appender)
  stdout_appender = Logging.appenders.stdout
  stdout_appender.layout = layout
  stdout_appender.level = verbose ? :debug : :info
  logger.add_appenders(
      stdout_appender,
      file_appender
  )
  logger
end

config = Mallory::Configuration.register do |c|
#  logger.datetime_format = '%F %T.%L'
  c.logger = get_logger(options.delete(:verbose))
  c.backend = EventMachine::Mallory::Backend::File.new("#{Dir.pwd}/proxies.txt")
#  c.backend = Mallory::Backend::Redis.new("127.0.0.1", 6379)
  c.connect_timeout = options.delete(:connect_timeout) || 2
  c.inactivity_timeout = options.delete(:inactivity_timeout) || 2
  c.listen = options.delete(:listen) || 9999
end

EventMachine::Mallory::Server.new(config).start!
